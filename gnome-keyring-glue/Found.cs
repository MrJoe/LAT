// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GnomeKeyring {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Found {

		public string Keyring;
		public uint ItemId;
		private IntPtr _attributes;
		public string Secret;

		public static GnomeKeyring.Found Zero = new GnomeKeyring.Found ();

		public static GnomeKeyring.Found New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return GnomeKeyring.Found.Zero;
			}
			GnomeKeyring.Found self = new GnomeKeyring.Found();
			self = (GnomeKeyring.Found) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("gnome-keyring")]
		static extern void gnome_keyring_found_list_free(IntPtr found_list);

		public static void ListFree(GLib.List found_list) {
			gnome_keyring_found_list_free(found_list.Handle);
		}

		[DllImport("gnome-keyring")]
		static extern void gnome_keyring_found_free(ref GnomeKeyring.Found raw);

		public void Free() {
			gnome_keyring_found_free(ref this);
		}

//		private static GLib.GType GType {
//			get { return GLib.GType.Pointer; }
//		}
#endregion
#region Customized extensions
#line 1 "Found.custom"
		private struct _g_array {
			public IntPtr data;
			public uint len;
		}

		public GnomeKeyring.Attribute[] Attributes {
			get {
				_g_array theArray = (_g_array)Marshal.PtrToStructure(_attributes, typeof(_g_array));
				GnomeKeyring.Attribute[] ret = new Attribute[theArray.len-1];
				unsafe {
					byte * curitem = (byte*)theArray.data;
					for (int i = 0; i < theArray.len-1; i++) {
						ret[i] = (GnomeKeyring.Attribute)Marshal.PtrToStructure((IntPtr)curitem, typeof(GnomeKeyring.Attribute));
						curitem = curitem + Marshal.SizeOf(typeof(GnomeKeyring.Attribute));
					}
				}
				return ret;
			}
		}

#endregion
	}
}
